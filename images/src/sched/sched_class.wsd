@startuml
' left to right direction


class sched_class {
    int uclamp_enabled;

    void (*enqueue_task) (struct rq *rq, struct task_struct *p, int flags);
    void (*dequeue_task) (struct rq *rq, struct task_struct *p, int flags);
    void (*yield_task)   (struct rq *rq);
    bool (*yield_to_task)(struct rq *rq, struct task_struct *p);sss
    void (*check_preempt_curr)(struct rq *rq, struct task_struct *p, int flags);
    struct task_struct *(*pick_next_task)(struct rq *rq);
    void (*put_prev_task)(struct rq *rq, struct task_struct *p);
    void (*set_next_task)(struct rq *rq, struct task_struct *p, bool first);

    int (*balance)(struct rq *rq, struct task_struct *prev, struct rq_flags *rf);
    int  (*select_task_rq)(struct task_struct *p, int task_cpu, int sd_flag, int flags);
    void (*migrate_task_rq)(struct task_struct *p, int new_cpu);
    void (*task_woken)(struct rq *this_rq, struct task_struct *task);
    void (*set_cpus_allowed)(struct task_struct *p, const struct cpumask *newmask);
    void (*rq_online)(struct rq *rq);
    void (*rq_offline)(struct rq *rq);

    void (*task_tick)(struct rq *rq, struct task_struct *p, int queued);
    void (*task_fork)(struct task_struct *p);
    void (*task_dead)(struct task_struct *p);
    void (*switched_from)(struct rq *this_rq, struct task_struct *task);
    void (*switched_to)  (struct rq *this_rq, struct task_struct *task);
    void (*prio_changed) (struct rq *this_rq, struct task_struct *task, int oldprio);
    unsigned int (*get_rr_interval)(struct rq *rq, struct task_struct *task);
    void (*update_curr)(struct rq *rq);

    void (*task_change_group)(struct task_struct *p, int type);

}

note top: 调度类的定义， 定义了调度类方法的集合

note right of sched_class::uclamp_enabled
    enabled for CONFIG_UCLAMP_TASK config ###
end note


note right of sched_class::enqueue_task
    将进程添加到rq队列中
end note

note right of sched_class::dequeue_task
    从rq队列中删除进程
end note

note right of sched_class::balance
    start method defined for SMP ***
end note

note right of sched_class::select_task_rq
    start method defined for SMP ***
end note

note right of sched_class::rq_offline
    end method defined for SMP ***
end note

note right of sched_class::task_fork
    新创建进程的初始化动作
end note

note right of sched_class::update_curr
    更新当前进程的的vruntime
end note

note right of sched_class::task_change_group
    enabled for CONFIG_FAIR_GROUP_SCHED config %%%
end note


class rq {
    raw_spinlock_t          lock;
    unsigned int            nr_running;
    u64 nr_switches;

    struct uclamp_rq        uclamp[UCLAMP_CNT];
    unsigned int            uclamp_flags;

    struct cfs_rq cfs;
    struct rt_rq rt;
    struct dl_rq dl;

    unsigned long           nr_uninterruptible;
    struct task_struct __rcu        *curr;
    struct task_struct      *idle;
    struct task_struct      *stop;
    unsigned long next_balance;
    struct mm_struct *prev_mm;

    unsigned int clock_update_flags;
    u64 clock;
    u64 clock_task;
    u64 clock_pelt;
    unsigned long lost_idle_time;
    atomic_t nr_iowait;

    unsigned char idle_balance;

    unsigned long calc_load_update;
    long calc_load_active;
}

note top: 每个处理器都有一个运行队列

note left of rq::lock
    runqueue lock
end note

note left of rq::uclamp
    CONFI_GUCLAMP_TASK
    /* Utilization clamp values based on CPU's RUNNABLE tasks */
end note

note left of rq::cfs
    cfs调度类的队列
end note

note left of rq::rt
    实时调度类的队列
end note

note left of rq::dl
    deadline调度类的队列
end note

note left of rq::idle_balance
    当前cpu是否处于idle状态
end note

class task_struct {
    unsigned int wakee_flips;
    unsigned long wakee_flip_decay_ts;
    struct task_struct *last_wakee;

    int prio;
    int static_prio;
    int normal_prio;
    unsigned int  rt_priority;

    const struct sched_class *sched_class;
    struct sched_entity se;
    struct sched_rt_entity rt;
    struct sched_dl_entity dl;

}

note left of task_struct::wakee_flips
    当前进程作为waker切换唤醒目标的次数, 值越大， 说明当前进程唤醒多个wakee
end note
note left of task_struct::last_wakee
    上一次唤醒的进程
end note

note left of task_struct::static_prio
    进程的静态优先级, 进程启动时分配， 可由nice值修改
end note

note left of task_struct::normal_prio
    通过static_prio或rt_priority和调度策略计算的优先级
end note

note left of task_struct::rt_priority
    实时进程的优先级
end note

class sched_entity {
    struct load_weight load;
    struct rb_node run_node;
    struct list_head group_node;
    unsigned int on_rq;

    u64 exec_start;
    u64 sum_exec_runtime;
    u64 vruntime;
    u64 prev_sum_exec_runtime;

    u64 nr_migrations;
    struct sched_statistics         statistics;

    int depth;
    struct sched_entity *parent;
    struct cfs_rq *cfs_rq;
    struct cfs_rq *my_q;
    unsigned long runnable_weight; 
    
    struct root_domain              *rd;
    struct sched_domain __rcu       *sd;

    struct sched_avg avg;
}

note right: 调度器的对象时调度实体， 调度实体是进程或进程组

note left of sched_entity::load
    当前sched_entity的权重信息
end note

note left of sched_entity::on_rq
    调度实体是否在就绪队列中
end note

note left of sched_entity::vruntime
    该调度实体的虚拟运行时间
end note

note left of sched_entity::depth
    CONFIG_FAIR_GROUP_SCHED %%% start
    调度实体在调度树中的深度
end note

note left of sched_entity::cfs_rq
    调度实体所属的根运行队列
end note

note left of sched_entity::my_q
    调度实体拥有的公平运行队列（调度组的调度实体）
end note

note left of sched_entity::runnable_weight
    CONFIG_FAIR_GROUP_SCHED %%% end
end note

note left of sched_entity::avg
    支持SMP时使用 ***
    调度实体的平均负载
end note


struct task_group {
    struct cgroup_subsys_state css;
  
    struct sched_entity     **se;
    struct cfs_rq           **cfs_rq;
    unsigned long           shares;

    struct sched_rt_entity  **rt_se;
    struct rt_rq            **rt_rq;

    struct rt_bandwidth     rt_bandwidth;
}

note right of task_group::se
    调度组在每个cpu上的调度实体
end note

note right of task_group::cfs_rq
    调度组在每个cpu上的公平调度队列
end note

note right of task_group::shares
    该cgroup对应的权重值
end note

class cfs_rq {
    struct load_weight load;
    unsigned int nr_running;
    unsigned int h_nr_running;      /* SCHED_{NORMAL,BATCH,IDLE} */
    unsigned int idle_h_nr_running; /* SCHED_IDLE */
    u64 exec_clock;
    u64 min_vruntime;
    struct rb_root_cached   tasks_timeline;
    struct sched_entity     *curr;
    struct sched_entity     *next;
    struct sched_entity     *last;
    struct sched_entity     *skip;
    struct sched_avg        avg;
    struct {
            raw_spinlock_t  lock ____cacheline_aligned;
            int             nr;
            unsigned long   load_avg;
            unsigned long   util_avg;
            unsigned long   runnable_avg;
    } removed;
    unsigned long tg_load_avg_contrib;
    long propagate;
    long prop_runnable_sum;
    unsigned long           h_load;
    u64 last_h_load_update;
    struct sched_entity     *h_load_next;
    struct rq               *rq;    /* CPU runqueue to which this cfs_rq is attached */
    int on_list;
    struct list_head        leaf_cfs_rq_list;
    struct task_group       *tg;    /* group that "owns" this runqueue */
    int runtime_enabled;
    s64 runtime_remaining;
    u64 throttled_clock;
    u64 throttled_clock_task;
    u64 throttled_clock_task_time;
    int throttled;
    int throttle_count;
    struct list_head throttled_list;
}

note right of cfs_rq::nr_running
    CFS就绪队列所有调度实体个数 
end note

note right of cfs_rq::h_nr_running
    就绪队列层级上所有调度实体的个数, 包含group se对应group cfs_rq上的调度实体 
end note

note right of cfs_rq::curr
    该队列上正在运行的调度实体
end note

note right of cfs_rq::avg
    CONFIG_SMP %%% start
    该队列的总平均负载
end note

note right of cfs_rq::tg_load_avg_contrib
    CONFIG_SMP %%% start
    该队列的总平均负载
end note

note right of cfs_rq::h_load_next
    CONFIG_FAIR_GROUP_SCHED %%% end
    CONFIG_SMP %%% end
end note

note right of cfs_rq::rq
    CONFIG_FAIR_GROUP_SCHED %%% start
    该cfs_rq所属的rq
end note

note right of cfs_rq::runtime_enabled
    CONFIG_CFS_BANDWIDTH %%% start
end note

note right of cfs_rq::throttled_list
    CONFIG_CFS_BANDWIDTH %%% end
    CONFIG_FAIR_GROUP_SCHED %%% end
end note

class root_domain {
        atomic_t refcount;
        atomic_t rto_count;
        struct rcu_head rcu;
        cpumask_var_t span;
        cpumask_var_t online;
        int overload;
        int overutilized;

        cpumask_var_t dlo_mask;
        atomic_t dlo_count;
        struct dl_bw dl_bw;
        struct cpudl cpudl;

        cpumask_var_t rto_mask;
        struct cpupri cpupri;

        unsigned long max_cpu_capacity;

        struct perf_domain __rcu *pd;
}

class sched_domain {
    struct sched_domain __rcu *parent;      /* top domain must be null terminated */
    struct sched_domain __rcu *child;       /* bottom domain must be null terminated */
    struct sched_group *groups;     /* the balancing groups of the domain */
    unsigned long min_interval;     /* Minimum balance interval ms */
    unsigned long max_interval;     /* Maximum balance interval ms */
    unsigned int busy_factor;       /* less balancing by factor if busy */
    unsigned int imbalance_pct;     /* No balance until over watermark */
    unsigned int cache_nice_tries;  /* Leave cache hot tasks for # tries */
    int nohz_idle;                  /* NOHZ IDLE status */
    int flags;                      /* See SD_* */
    int level;
    unsigned long last_balance;     /* init to jiffies. units in jiffies */
    unsigned int balance_interval;  /* initialise to 1. units in ms. */
    unsigned int nr_balance_failed; /* initialise to 0 */
    u64 max_newidle_lb_cost;
    unsigned long next_decay_max_lb_cost;
    u64 avg_scan_cost;              /* select_idle_sibling */
    union {
        void *private;          /* used during construction */
        struct rcu_head rcu;    /* used during destruction */
    };
    struct sched_domain_shared *shared;
    unsigned int span_weight;

    unsigned long span[];
}

note top: 调度域,和cpu的拓扑有关

note left of sched_domain::parent
    调度域的父节点， 组成树状的拓扑结构 
end note

note left of sched_domain::busy_factor
    如果cpu繁忙, 那么均衡时间间隔定义为busy_factor x balance_interval 
end note

note left of sched_domain::balance_interval
    调度域的均衡的基础时间间隔
end note




class sched_domain_shared {
        atomic_t        ref;
        atomic_t        nr_busy_cpus;
        int             has_idle_cores;
        struct sparsemask *cfs_overload_cpus;
}

note top: 调度域共享的信息


class sched_group {
        struct sched_group *next;                  /* Must be a circular list */
        atomic_t ref;
        
        unsigned int group_weight;
        struct sched_group_capacity *sgc;
        int asym_prefer_cpu;        /* CPU of highest priority in group */
        
        unsigned long cpumask[];
}  

note top: 调度域组, 一个调度域内可以划分多个调度域组

note left of sched_group::next
    多个调度域组组成一个链表，调度组的下一个节点
end note

note left of sched_group::group_weight
    调度域组的cpu数量
end note

note left of sched_group::sgc
    调度域组的的算力信息
end note

note left of sched_group::cpumask
    调度域组包含的cpu
end note





class perf_domain { 
        struct em_perf_domain *em_pd;
        struct perf_domain *next;
        struct rcu_head rcu;
}


sched_domain::groups --* sched_group
sched_domain::shared --* sched_domain_shared

task_struct::sched_class --* sched_class
task_struct::se --* sched_entity

task_group::se --* sched_entity
cfs_rq::tg --* task_group
sched_entity::cfs_rq --* cfs_rq

cfs_rq *-- rq::cfs
rq::sd --* sched_domain
rq::rd --* root_domain

root_domain::pd --* perf_domain

