@startuml

class kobject {
        const char *name;
        struct list_head entry;
        struct kobject *parent;
        struct kset *kset;
        struct kobj_type *ktype;
        struct kernfs_node *sd; /* sysfs directory entry */
        struct kref kref;

        unsigned int state_initialized:1;
        unsigned int state_in_sysfs:1;
        unsigned int state_add_uevent_sent:1;
        unsigned int state_remove_uevent_sent:1;
        unsigned int uevent_suppress:1;
}

note top: 各种设备的抽象基类

note left of kobject::parent
    指向父结构的object对象, 上层节点
end note

note left of kobject::kset
    内核对象所属的kset
end note

note left of kobject::ktype
    该内核对象的sys文件系统的相关操作函数和属性
end note

note left of kobject::kref
    该内核对象的引用计数
end note

class kobj_type {
        void (*release)(struct kobject *kobj);
        const struct sysfs_ops *sysfs_ops;
        struct attribute **default_attrs;       /* use default_groups instead */
        const struct attribute_group **default_groups;
        const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);
        const void *(*namespace)(struct kobject *kobj);
        void (*get_ownership)(struct kobject *kobj, kuid_t *uid, kgid_t *gid);
}

note top: kobject的默认的操作集合

class kset {
        struct list_head list; 
        spinlock_t list_lock;
        struct kobject kobj;
        const struct kset_uevent_ops *uevent_ops;
}

note top: 嵌入相同类型结构的kobject集合


class bus_type {
        const char *name;
        const char *dev_name;
        struct device *dev_root;
        const struct attribute_group **bus_groups;
        const struct attribute_group **dev_groups;
        const struct attribute_group **drv_groups;

        int (*match)(struct device *dev, struct device_driver *drv);
        int (*uevent)(struct device *dev, struct kobj_uevent_env *env);
        int (*probe)(struct device *dev);
        void (*sync_state)(struct device *dev);
        int (*remove)(struct device *dev);
        void (*shutdown)(struct device *dev);
        int (*online)(struct device *dev);
        int (*offline)(struct device *dev);
        int (*suspend)(struct device *dev, pm_message_t state);
        int (*resume)(struct device *dev);
        int (*num_vf)(struct device *dev);
        int (*dma_configure)(struct device *dev);

        const struct dev_pm_ops *pm;
        const struct iommu_ops *iommu_ops;

        struct subsys_private *p;
        struct lock_class_key lock_key;

        bool need_parent_lock;
}


note right of bus_type::count
    该设备对应的从设备号的数量
end note

struct device {
        struct kobject kobj;
        struct device *parent;

        struct device_private   *p;

        const char              *init_name; /* initial name of the device */
        const struct device_type *type;

        struct bus_type *bus;           /* type of bus device is on */
        struct device_driver *driver;   /* which driver has allocated this device */
        void            *platform_data; /* Platform specific data, device core doesn't touch it */
        void            *driver_data;   /* Driver data, set and get with dev_set_drvdata/dev_get_drvdata */
        struct mutex            mutex;  /* mutex to synchronize calls to its driver.*/

        struct dev_links_info   links;
        struct dev_pm_info      power;
        struct dev_pm_domain    *pm_domain;

        u64             *dma_mask;      /* dma mask (if dma'able device) */
        u64             coherent_dma_mask;/* Like dma_mask, but for */
        u64             bus_dma_limit;  /* upstream dma constraint */
        const struct bus_dma_region *dma_range_map;

        struct device_dma_parameters *dma_parms;
        struct list_head        dma_pools;      /* dma pools (if dma'ble) */
        struct dev_archdata     archdata;
        struct device_node      *of_node; /* associated device tree node */
        struct fwnode_handle    *fwnode; /* firmware device node */

        int numa_node;      /* NUMA node this device is close to */
        dev_t devt;   /* dev_t, creates the sysfs dev */
        u32 id;     /* device instance */

        spinlock_t              devres_lock;
        struct list_head        devres_head;
        struct class            *class;
        const struct attribute_group **groups;  /* optional groups */
        void    (*release)(struct device *dev);
        struct iommu_group      *iommu_group;
        struct dev_iommu        *iommu;

        bool offline_disabled:1;
        bool offline:1;
        bool of_node_reused:1;
        bool state_synced:1;
}

note top: 内核中设备的一个实例

note right of device::kobj
    该设备链接到结构体系中的kobject
end note 

note right of device::driver
    管理该设备的驱动程序
end note 

note right of device::bus
    该设备链接到何种类型的总线上
end note 

class device_driver {
        const char *name;
        struct bus_type *bus;

        struct module *owner;
        const char *mod_name;      /* used for built-in modules */

        bool suppress_bind_attrs;       /* disables bind/unbind via sysfs */
        enum probe_type probe_type;

        const struct of_device_id       *of_match_table;
        const struct acpi_device_id     *acpi_match_table;

        int (*probe) (struct device *dev);
        void (*sync_state)(struct device *dev);
        int (*remove) (struct device *dev);
        void (*shutdown) (struct device *dev);
        int (*suspend) (struct device *dev, pm_message_t state);
        int (*resume) (struct device *dev);
        const struct attribute_group **groups;
        const struct attribute_group **dev_groups;

        const struct dev_pm_ops *pm;
        void (*coredump) (struct device *dev);

        struct driver_private *p;
}

note right of device_driver::name
    设备驱动的名称
end note 

note right of device_driver::bus
    设备驱动所属的总线
end note 


kobject::ktype --> kobj_type
kobject::kset --> kset

kset::kobj --* kobject

device::kobj --* kobject
device::bus --> bus_type
device::driver --> device_driver


device_driver::bus --> bus_type

@enduml
